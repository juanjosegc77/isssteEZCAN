package interfaz;

import database.HelperDB;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/*
 * isssteEZCAN
 * Departamento de Investigación en Biología Molecular y Medicina Genómica 
 * Hospital Regional "Lic. Adolfo López Mateos" ISSSTE
 * Desarrollador: IB Juan José Guzmán Cruz
 * Responsable del proyecto: DC Osvaldo Erick Sánchez Hernández
 */
public class Marcadores extends javax.swing.JDialog {

    private final HelperDB helper;
    private final DefaultTableModel model;
    private final Tablas tablas;
    private final Personales personales;
    private int[] ids;
    private int reg_paciente, paciente;
    private int len;
    
    public Marcadores(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        this.helper = new HelperDB();
        this.model = new DefaultTableModel();
        this.tablas = new Tablas();
        personales = new Personales(new javax.swing.JFrame(), true);
        this.len = 0;
        
        cargarTabla();
        escucharTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bGuardar = new javax.swing.JButton();
        bSalir = new javax.swing.JButton();
        bRegresar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tMarcadores = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                if(colIndex==1){
                    return true;
                }
                return false; //Disallow the editing of any cell
            }
        };

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("MARCADORES");
        setAlwaysOnTop(true);
        setMinimumSize(new java.awt.Dimension(1350, 750));
        setModal(true);
        setName("dMarcadores"); // NOI18N

        bGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ic_guardar.png"))); // NOI18N
        bGuardar.setMaximumSize(new java.awt.Dimension(98, 97));
        bGuardar.setMinimumSize(new java.awt.Dimension(98, 97));
        bGuardar.setPreferredSize(new java.awt.Dimension(98, 97));
        bGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                bGuardarMouseReleased(evt);
            }
        });

        bSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ic_salir.png"))); // NOI18N
        bSalir.setMaximumSize(new java.awt.Dimension(98, 97));
        bSalir.setMinimumSize(new java.awt.Dimension(98, 97));
        bSalir.setPreferredSize(new java.awt.Dimension(98, 97));
        bSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                bSalirMouseReleased(evt);
            }
        });

        bRegresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ic_regresar.png"))); // NOI18N
        bRegresar.setMaximumSize(new java.awt.Dimension(98, 97));
        bRegresar.setMinimumSize(new java.awt.Dimension(98, 97));
        bRegresar.setPreferredSize(new java.awt.Dimension(98, 97));
        bRegresar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                bRegresarMouseReleased(evt);
            }
        });

        jScrollPane2.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N

        tMarcadores.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        tMarcadores.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tMarcadores.setIntercellSpacing(new java.awt.Dimension(5, 2));
        tMarcadores.setOpaque(false);
        tMarcadores.setRowHeight(20);
        tMarcadores.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tMarcadoresKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tMarcadoresKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tMarcadores);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1192, Short.MAX_VALUE)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bRegresar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bGuardar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bSalir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(bRegresar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(114, 114, 114)
                .addComponent(bGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(93, 93, 93)
                .addComponent(bSalir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(199, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane2)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bGuardarMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bGuardarMouseReleased
        String insertar_marcadores = getDataMarcadores();
        //insertarRegistro(insertar_marcadores);
        JOptionPane.showMessageDialog(this, "Registro guardado");
        
        dispose();
    }//GEN-LAST:event_bGuardarMouseReleased

    private void bSalirMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bSalirMouseReleased
        dispose();
    }//GEN-LAST:event_bSalirMouseReleased

    private void bRegresarMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bRegresarMouseReleased
        Personales personales = new Personales(new javax.swing.JFrame(), true);
        setVisible(false);
        personales.setVisible(true);
    }//GEN-LAST:event_bRegresarMouseReleased

    private void tMarcadoresKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tMarcadoresKeyPressed
        int row = this.tMarcadores.getSelectedRow();
        int col = this.tMarcadores.getSelectedColumn();
        
        if(evt.getKeyCode()==8 && this.len > 0){
            this.len -= 1;
        }
    
        if(evt.getKeyCode()==java.awt.event.KeyEvent.VK_TAB){
            if(col == 8 && row < this.tMarcadores.getRowCount()){
                row += 1;
                col = 2;
                this.tMarcadores.changeSelection(row, col, false, false);
            }
            else{
                this.tMarcadores.changeSelection(row, col, false, false);
            }
        } 
    }//GEN-LAST:event_tMarcadoresKeyPressed

    private void tMarcadoresKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tMarcadoresKeyTyped
        char c = evt.getKeyChar();
        String c1 = String.valueOf(c);
        if(c1.matches("[ACGT]") && len < 2 ){
            this.len += 1;
        }
        else{
            evt.consume();
        }
    }//GEN-LAST:event_tMarcadoresKeyTyped

    private void cargarTabla(){
        String query = "SELECT * FROM Marcadores";
        String[] columnas = {"Marcador",
                            "Genotipo",
                            "Genotipo_cod",
                            "Dominante",
                            "Dominante_cod",
                            "Recesivo",
                            "Recesivo_cod",
                            "Aditivo",
                            "Aditivo_cod"};
        this.helper.setColumnsToRows(this.model, this.tMarcadores, query, columnas, 4);
        this.tablas.ajustarColumnas(this.tMarcadores);
        this.tMarcadores.changeSelection(0, 1, false, false);
    }
    
    private void escucharTabla(){
        this.tMarcadores.getModel().addTableModelListener(new TableModelListener() { 
            @Override
            public void tableChanged(TableModelEvent e) {
                int row = e.getLastRow();
                int col = e.getColumn();
                
                String genotipo = (String) tMarcadores.getValueAt(row, 1);
                if(col == 1 && !genotipo.isEmpty()){
                    String marcador = (String) tMarcadores.getValueAt(row, 0);
                    String[] conf = marcador.split("_");
                    calcularEnTabla(row, conf);
                    tablas.ajustarColumnas(tMarcadores);
                    len = 0;
                }
            }
        });
    }
                
    private void calcularEnTabla(int row, String[] conf){
        String conf1 = null, conf2 = null, conf3 = null;
        String genotipo = null, dominante = null, recesivo = null, aditivo = null;
        String genotipo_codigo = "error", dominante_codigo = "0", recesivo_codigo = "0", 
                aditivo_codigo = "0";
        conf1 = conf[1].substring(0, 2);
        conf2 = conf[1].substring(3, 5);
        conf3 = conf[1].substring(6, 8);
        
        // Genotipo y Genotipo código
        genotipo = (String) this.tMarcadores.getValueAt(row, 1);
        
        if(genotipo.equals(conf1)){
            genotipo_codigo = "1";
        }
        else if(genotipo.equals(conf2)){
            genotipo_codigo = "2";
        }
        else if(genotipo.equals(conf3)){
            genotipo_codigo = "3";
        }
        this.tMarcadores.setValueAt(genotipo_codigo, row, 2);
        
        if(!genotipo_codigo.equals("error")){
            // Dominante y Dominante código
            dominante = conf1 + " + " + conf2 + " vs " + conf3;
            this.tMarcadores.setValueAt(dominante, row, 3);

            if(genotipo.equals(conf1) || genotipo.equals(conf2)){
                dominante_codigo = "1";
            }
            this.tMarcadores.setValueAt(dominante_codigo, row, 4);

            // Recesivo y Recesivo código
            recesivo = conf1 + " vs " + conf2 + " + " + conf3;
            this.tMarcadores.setValueAt(recesivo, row, 5);

            if(genotipo.equals(conf1)){
                recesivo_codigo = "1";
            }
            this.tMarcadores.setValueAt(recesivo_codigo, row, 6);

            // Aditivo y Aditivo código
            aditivo = conf1 + "2" + conf2 + "1" + conf3 + "0";
            this.tMarcadores.setValueAt(aditivo, row, 7);

            if(genotipo.equals(conf1)){
                aditivo_codigo = "2";
            }
            else if(genotipo.equals(conf2)){
                aditivo_codigo = "1";
            }
            if(genotipo.equals(conf3)){
                aditivo_codigo = "0";
            }
            this.tMarcadores.setValueAt(aditivo_codigo, row, 8);
        }
    }
    
    // *************     OBTENER DATOS     **************************
    private String getDataMarcadores(){
        String valores = "";
        int filas_marcadores = this.tMarcadores.getRowCount();
        String datos_tabla = "";  
        String genotipo_cod = null, dominante_cod = null, recesivo_cod = null,
                aditivo_cod;
        
        // 1. OBTENER LOS DATOS DEL NUEVO REGISTRO Y CONCATENARLOS EN UN String
        this.ids = personales.getIds();
        this.reg_paciente = this.ids[0];
        this.paciente = this.ids[1];
        
        for(int i=0; i<filas_marcadores; i++){
            genotipo_cod = (String) this.tMarcadores. getValueAt(i, 2);
            dominante_cod = (String) this.tMarcadores.getValueAt(i, 4);
            recesivo_cod = (String) this.tMarcadores.getValueAt(i, 6);
            aditivo_cod = (String) this.tMarcadores.getValueAt(i, 8);
            
            if(i<filas_marcadores-1){
                datos_tabla += genotipo_cod + ", " + dominante_cod + ", "
                        + recesivo_cod + ", " + aditivo_cod + ", ";
            }
            else{
                datos_tabla += genotipo_cod + ", " + dominante_cod + ", "
                        + recesivo_cod + ", " + aditivo_cod;
            }
        }
        
        valores = "'" + this.reg_paciente + "', "
                + "'" + this.paciente + "', "
                + datos_tabla;
        
        // 2. DEFINIR EN UN String LA SINTAXIS DEL COMANDO SQL A ENVIAR
        String insertar_marcadores = "INSERT INTO Marcadores VALUES(" + valores + ")";
        System.out.println(insertar_marcadores);
        return insertar_marcadores;
    }
    
    private boolean insertarRegistro(String query_insertar){
        boolean r = false;
        
        r = this.helper.updateDB(query_insertar);

        return r;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Marcadores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Marcadores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Marcadores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Marcadores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Marcadores dialog = new Marcadores(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bGuardar;
    private javax.swing.JButton bRegresar;
    private javax.swing.JButton bSalir;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTable tMarcadores;
    // End of variables declaration//GEN-END:variables
}
